{
    // --------------------------------------------------------------------
    // JSHint Configuration, Strict Edition
    // --------------------------------------------------------------------

    "bitwise"       : true,     // Prohibit bitwise operators (&, |, ^, etc.).
    "camelcase"     : true,     // This option allows you to force all variable names to use either camelCase style or UPPER_CASE with underscores.    
    "curly"         : false,    // Require {} for every new block or scope.
    "eqeqeq"        : false,    // Require triple equals i.e. `===`.
    "es5"           : true,     // Allow EcmaScript 5 syntax.
    "forin"         : true,     // Tolerate `for in` loops without `hasOwnPrototype`.
    "freeze"        : true,     // This options prohibits overwriting prototypes of native objects such as Array, Dateand so on.    
    "funcscope"     : false,    // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
    "globalstrict"  : true,     // Allow global "use strict" (also enables 'strict').
    "immed"         : true,     // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "indent"        : 4,        // Specify indentation spacing
    "latedef"       : true,     // Prohibit variable use before definition.
    "maxcomplexity" : 3,        // This option lets you control cyclomatic complexity throughout your code. Cyclomatic complexity measures the number of linearly independent paths through a program's source code.
    "maxdepth"      : 2,        // This option lets you control how nested do you want your blocks to be
    "maxerr"        : 100,      // Maximum errors before stopping.
    "maxlen"        : 120,      // This option lets you set the maximum length of a line.
    "maxparams"     : 3,        // This option lets you set the max number of formal parameters allowed per function
    "maxstatements" : 9,        // This option lets you set the max number of statements allowed per function
    "newcap"        : true,     // Require capitalization of all constructor functions e.g. `new F()`.
    "noarg"         : true,     // Prohibit use of `arguments.caller` and `arguments.callee`.
    "nocomma"       : true,     // This option prohibits the use of the comma operator. When misused, the comma operator can obscure the value of a statement and promote incorrect code.
    "noempty"       : true,     // Prohibit use of empty blocks.
    "nonbsp"        : true,     // This option warns about "non-breaking whitespace" characters. These characters can be entered with option-space on Mac computers and have a potential of breaking non-UTF8 web pages.
    "nonew"         : true,     // Prohibit use of constructors for side-effects.
    "notypeof"      : false,    // This option suppresses warnings about invalid typeof operator values. This operator has only a limited set of possible return values. By default, JSHint warns when you compare its result with an invalid value which often can be a typo.
    "quotmark"      : 'single', // This option enforces the consistency of quotation marks used throughout your code. It accepts three values: true if you don't want to enforce one particular style but want some consistency, "single" if you want to allow only single quotes and "double" if you want to allow only double quotes.
    "shadow"        : false,    // This option enforces the consistency of quotation marks used throughout your code. It accepts three values: true if you don't want to enforce one particular style but want some consistency, "single" if you want to allow only single quotes and "double" if you want to allow only double quotes.
    "singleGroups"  : true,     // This option prohibits the use of the grouping operator for single-expression statements. This unecessary usage commonly reflects a misunderstanding of unary operators
    "undef"         : true,     // Require all non-global variables be declared before they are used.
    "unused"        : true,     // This option warns when you define and never use your variables. It is very useful for general code cleanup, especially when used in addition to undef.
    // == Relaxing Options ================================================
    //
    // These options allow you to suppress certain types of warnings. Use
    // them only if you are absolutely positive that you know what you are
    // doing.
    
    "asi"           : false,    // Tolerate Automatic Semicolon Insertion (no semicolons).
    "boss"          : false,    // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "debug"         : false,    // Allow debugger statements e.g. browser breakpoints.
    "eqnull"        : false,    // Tolerate use of `== null`.
    "esnext"        : true,     // Allow ES.next specific features such as `const` and `let`.
    "evil"          : false,    // Tolerate use of `eval`.
    "expr"          : false,    // Tolerate `ExpressionStatement` as Programs.
    "iterator"      : false,    // Allow usage of __iterator__ property.
    "lastsemic"     : false,    // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
    "laxbreak"      : false,    // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma"      : false,    // Suppress warnings about comma-first coding style.
    "loopfunc"      : false,    // Allow functions to be defined within loops.
    "multistr"      : false,    // Tolerate multi-line strings.
    "noyield"       : false,    // This option suppresses warnings about generator functions with no yield statement in them.
    "onecase"       : false,    // Tolerate switches with just one case.
    "plusplus"      : true,     // Prohibit use of `++` & `--`.
    "proto"         : false,    // Tolerate __proto__ property. This property is deprecated.
    "scripturl"     : false,    // Tolerate script-targeted URLs.
    "sub"           : false,    // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "supernew"      : false,    // Tolerate `new function () { ... };` and `new Object;`.
    "validthis"     : false,    // Tolerate strict violations when the code is running in strict mode and you use this in a non-constructor function.
    "withstmt"      : false,    // This option suppresses warnings about the use of the with statement. The semantics of the with statement can cause confusion among developers and accidental definition of global variables
    
    // == Environments ====================================================
    //
    // These options pre-define global variables that are exposed by
    // popular JavaScript libraries and runtime environmentsâ€”such as
    // browser or node.js.
    
    "browser"       : false,    // Standard browser globals e.g. `window`, `document`.
    "browserify"    : false,    // This option defines globals available when using the Browserify tool to build a project.
    "couch"         : false,    // Enable globals exposed by CouchDB.
    "devel"         : false,    // Allow development statements e.g. `console.log();`.
    "dojo"          : false,    // Enable globals exposed by Dojo Toolkit.
    "jasmine"       : false,    // This option defines globals exposed by the Jasmine unit testing framework.
    "jquery"        : false,    // Enable globals exposed by jQuery JavaScript library.
    "mocha"         : false,    // This option defines globals exposed by the "BDD" and "TDD" UIs of the Mocha unit testing framework.
    "mootools"      : false,    // Enable globals exposed by MooTools JavaScript framework.
    "node"          : false,    // Enable globals available when code is running inside of the NodeJS runtime environment.
    "nonstandard"   : false,    // Define non-standard but widely adopted globals such as escape and unescape.
    "prototypejs"   : false,    // Enable globals exposed by Prototype JavaScript framework.
    "rhino"         : false,    // Enable globals available when your code is running inside of the Rhino runtime environment.
    "worker"        : false,    // This option defines globals available when your code is running inside of a Web Worker. Web Workers provide a simple means for web content to run scripts in background threads.
    "wsh"           : false,    // Enable globals available when your code is running as a script for the Windows Script Host.
}
