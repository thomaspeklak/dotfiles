# cat << ►_◄ > /dev/null

# Setting the prefix from C-b to C-a
# START:prefix
set -g prefix C-a  
# END:prefix
# Free the original Ctrl-b prefix keybinding
# START:unbind
unbind C-b 
# END:unbind
#setting the delay between prefix and command
# START:delay
set -sg escape-time 1
# END:delay
set -sg repeat-time 600                   # increase repeat timeout
set -s quiet on                           # disable various messages
# Ensure that we can send Ctrl-A to other apps
# START:bind_prefix
bind C-a send-prefix
# END:bind_prefix

# Set the base index for windows to 1 instead of 0
# START:index
set -g base-index 1
# END:index

# Set the base index for panes to 1 instead of 0
# START:panes_index
setw -g pane-base-index 1
# END:panes_index

# Reload the file with Prefix r
# START:reload
bind r source-file ~/.tmux.conf \; display "Reloaded!"
# END:reload

# splitting panes
# START:panesplit
bind | split-window -h -c '#{pane_current_path}'
bind - split-window -v -c '#{pane_current_path}'
bind c new-window -c '#{pane_current_path}'
# END:panesplit

# moving between panes
# START:paneselect
bind h select-pane -L 
bind j select-pane -D 
bind k select-pane -U
bind l select-pane -R    
# END:paneselect

bind < send-keys -t music:1 >
bind > send-keys -t music:1 p

# Quick pane selection
# START:panetoggle
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
# END:panetoggle

# Pane resizing
# START:paneresize
bind -r H resize-pane -L 10 
bind -r J resize-pane -D 10 
bind -r K resize-pane -U 10 
bind -r L resize-pane -R 10
# END:paneresize
#
# Move window
bind -r C-i swap-window -t -1
bind -r C-o swap-window -t +1

#Sync panes
bind S setw synchronize-panes \; display "Toggle Synchronize"

# Set the default terminal mode to 256color mode
# START:termcolor
set -g default-terminal "screen-256color"
setw -g xterm-keys on

# END:termcolor

# enable activity alerts
#START:activity
setw -g monitor-activity on
set -g visual-activity on
#END:activity

# set the status line's colors
# START:statuscolor
set -g status-fg white
set -g status-bg black
# END:statuscolor

# set the color of the window list
# START:windowstatuscolor
setw -g window-status-fg cyan 
setw -g window-status-bg default 
setw -g window-status-attr dim
# END:windowstatuscolor

# set colors for the active window
# START:activewindowstatuscolor
setw -g window-status-current-fg white 
setw -g window-status-current-bg red 
setw -g window-status-current-attr bright
# END:activewindowstatuscolor

# pane colors
# START:panecolors
set -g pane-border-fg white
set -g pane-border-bg default
set -g pane-active-border-fg green
set -g pane-active-border-bg default
# END:panecolors

# Command / message line
# START:cmdlinecolors
set -g message-fg white
set -g message-bg black
set -g message-attr bright
# END:cmdlinecolors

# Status line left side
# START:statusleft
#set -g status-left-length 40 
#set -g status-left "#[fg=green]Session: #S #[fg=yellow]#I #[fg=cyan]#P"
# END:statusleft

#START:utf8
set -g status-utf8 on
setw -g utf8 on
#END:utf8
#
set -g history-limit 5000                 # boost history

# renumber windows when a window is closed
set -g renumber-windows on

setw -g automatic-rename on # rename window to reflect current program
set -g set-titles on                        # set terminal title
set -g set-titles-string '#h ❐ #S ● #I #W'

set -g status-interval 10     # redraw status line every 10 seconds

# maximize current pane
bind + run 'cut -c5- ~/.tmux.conf | sh -s maximize_pane'

# tmux theme, colors and status line
# # available themes:
# #   - powerline (a powerline inspired theme)
# #   - powerline_patched_font (a powerline inspired theme using a patched font)
tmux_conf_theme=powerline_patched_font

# Status line right side
# 15% | 28 Nov 18:15
# START: statusright
#set -g status-right "#[fg=cyan]%d %b %R"
# END:statusright

# Center the window list
# START:centerwindowlist
#set -g status-justify centre
# END:centerwindowlist

# enable vi keys.
# START:vikeys
setw -g mode-keys vi
# END:vikeys
#

#CLIPBOARD
bind C-c run "tmux save-buffer - | xclip -i -sel clipboard"
bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer"

# Toggle mouse on with ^B m
bind m \
  set -g mouse on \;\
  display 'Mouse: ON'

# Toggle mouse off with ^B M
bind M \
  set -g mouse off \;\
  display 'Mouse: OFF'

# Reload the file with Prefix r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# 24 hour clock
setw -g clock-mode-style 24

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

#bind C-n run-shell "tmux setw -g mode-mouse off; tmux set -g mouse-select-pane off; tmux set -g mouse-resize-pane off; tmux set -g mouse-select-window off"
#bind C-m run-shell "tmux setw -g mode-mouse on; tmux set -g mouse-select-pane on; tmux set -g mouse-resize-pane on; tmux set -g mouse-select-window on"




# toggle mouse
#bind m run "cut -c3- ~/.tmux.conf | sh -s toggle_mouse"

# -- 8< ------------------------------------------------------------------------

run 'cut -c3- ~/.tmux.conf | sh -s apply_theme $tmux_conf_theme'
run 'for name in $(printenv | grep -Eo ^tmux_conf_[^=]+); do tmux setenv -gu $name; done;'

# -- user defined --------------------------------------------------------------
#
if '[ -f ~/.tmux.conf.local ]' 'source ~/.tmux.conf.local'


# List of plugins
# Supports `github_username/repo` or full git URLs
set -g @tpm_plugins "              \
  tmux-plugins/tpm                 \
  tmux-plugins/tmux-battery        \
  tmux-plugins/tmux-copycat        \
  tmux-plugins/tmux-online-status  \
  tmux-plugins/tmux-open           \
  tmux-plugins/tmux-resurrect      \
  tmux-plugins/tmux-continuum      \
  tmux-plugins/tmux-yank           \
"
# Other examples:
# github_username/plugin_name    \
# git@github.com/user/plugin     \
# git@bitbucket.com/user/plugin  \

set -g @continuum-restore "on"
set -g @resurrect-processes "v nv gulp node npm ssh mongo"
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'

# initializes TMUX plugin manager
run-shell ~/.tmux/plugins/tpm/tpm

# ►_◄

# # exit the script if any statement returns a non-true return value
# set -e
#
# apply_theme() {
#   case "$1" in
#     powerline_patched_font)
#       left_separator=''
#       left_separator_black=''
#       right_separator=''
#       right_separator_black=''
#       session_symbol=''
#       ;;
#     powerline)
#       left_separator='|'
#       left_separator_black=' '
#       right_separator='|'
#       right_separator_black=' '
#       ;;
#   esac
#
#   case "$1" in
#     powerline*)
#
#       # panes
#       pane_border_fg=colour238        # light gray
#       pane_active_border_fg=colour39  # light blue
#
#       tmux set -g pane-border-style fg=$pane_border_fg \; set -g pane-active-border-style fg=$pane_active_border_fg
#       #uncomment for fat borders
#       #tmux set -ga pane-border-style bg=$pane_border_fg \; set -ga pane-active-border-style bg=$pane_active_border_fg
#
#       display_panes_active_colour=colour39 # light blue
#       display_panes_colour=colour39        # light blue
#       tmux set -g display-panes-active-colour $display_panes_active_colour \; set -g display-panes-colour $display_panes_colour
#
#       # messages
#       message_fg=colour16   #black
#       message_bg=colour226  #yellow
#       message_attr=bold
#       tmux set -g message-style fg=$message_fg,bg=$message_bg,$message_attr
#
#       # windows mode
#       mode_fg=colour16   #black
#       mode_bg=colour226  #yellow
#       mode_attr=bold
#       tmux setw -g mode-style fg=$mode_fg,bg=$mode_bg,$mode_attr
#
#       # status line
#       status_fg=colour253 # white
#       status_bg=colour232 # dark gray
#       tmux set -g status-style fg=$status_fg,bg=$status_bg
#
#       session_fg=colour16  # black
#       session_bg=colour226 # yellow
#       status_left="#[fg=$session_fg,bg=$session_bg,bold] ❐ #S #[fg=$session_bg,bg=$status_bg,nobold]$left_separator_black"
#       tmux set -g status-left-length 32 \; set -g status-left "$status_left"
#
#       window_status_fg=colour245 # light gray
#       window_status_bg=colour232 # dark gray
#       window_status_format="#I #W"
#       tmux setw -g window-status-style fg="$window_status_fg",bg="$window_status_bg" \; setw -g window-status-format "$window_status_format"
#
#       window_status_current_fg=colour16 # black
#       window_status_current_bg=colour39 # light blue
#       window_status_current_format="#[fg=$window_status_bg,bg=$window_status_current_bg]$left_separator_black#[fg=$window_status_current_fg,bg=$window_status_current_bg,bold] #I $left_separator #W #[fg=$window_status_current_bg,bg=$status_bg,nobold]$left_separator_black"
#       tmux setw -g window-status-current-format "$window_status_current_format"
#       tmux set -g status-justify left
#
#       window_status_activity_fg=default
#       window_status_activity_bg=default
#       window_status_activity_attr=underscore
#       tmux setw -g window-status-activity-style fg=$window_status_activity_fg,bg=$window_status_activity_bg,$window_status_activity_attr
#
#       time_date_fg=colour245  # light gray
#       time_date_bg=colour232  # dark gray
#       whoami_fg=colour254     # white
#       whoami_bg=colour160     # red
#       host_fg=colour16        # black
#       host_bg=colour254       # white
#       status_right="#{battery_icon} #{battery_percentage} #{online_status} #[fg=$time_date_fg,nobold]$right_separator %R $right_separator %d %b #[fg=$whoami_bg,bg=$time_date_bg,nobold]$right_separator_black#[fg=$whoami_fg,bg=$whoami_bg,nobold] #(whoami) $right_separator_black#[fg=$host_fg,bg=$host_bg,bold] #h "
#       tmux set -g status-right-length 164 \; set -g status-right "$status_right"
#
#       # clock
#       clock_mode_colour=colour39  # light blue
#       tmux setw -g clock-mode-colour $clock_mode_colour
#       ;;
#   esac
# }
#
# circled_digit() {
#   circled_digits='⓪①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳'
#   if [ $1 -lt 20 ] 2>/dev/null ; then
#     echo ${circled_digits:$1:1}
#   else
#     echo $1
#   fi
# }
#
# maximize_pane() {
#   tmux -q -L swap-pane-test -f /dev/null new-session -d \; new-window \; new-window \; swap-pane -t :1 \; kill-session || { tmux display 'your tmux version has a buggy swap-pane command - see ticket #108, fixed in upstream commit 78e783e'; exit; }
#   __current_pane=$(tmux display -p '#{pane_id}')
#
#   __dead_panes=$(tmux list-panes -s -F '#{pane_dead} #{pane_id} #{pane_title}' | grep -o '^1 %.\+%.\+$' || true)
#   __restore=$(echo "${__dead_panes}" | sed -n -E -e "s/^1 ${__current_pane} \[\+\](%[0-9]+)$/tmux swap-pane -s \1 -t ${__current_pane} \; kill-pane -t ${__current_pane}/p" -e "s/^1 (%[0-9]+) \[\+\]${__current_pane}$/tmux swap-pane -s \1 -t ${__current_pane} \; kill-pane -t \1/p" )
#
#   if [ x"${__restore}" = x ] ; then
#     [ x"$(tmux list-panes | wc -l | sed 's/^ *//g')" = x1 ] && tmux display "Can't maximize with only one pane" && return
#     __window=$(tmux new-window -P "exec maximized+ 2> /dev/null | tmux setw remain-on-exit on && printf '\033]2;%s\033\\' [+]${__current_pane}")
#     __window=${__window%.*}
#
#     __guard=100
#     while ( [ x"$(tmux list-panes -t ${__window} -F '#{session_name}:#{window_index} #{pane_dead}')" != x"${__window} "1 ] && [ x"${__guard}" != x0 ] ) ; do sleep 0.01 ; _guard=$((__guard - 1)) ; done
#     if [ x"${__guard}" = 0 ] ; then
#       exit 1
#     fi
#
#     __new_pane=$(tmux display -p '#{pane_id}')
#     tmux setw remain-on-exit off \; swap-pane -s "${__current_pane}" -t "${__new_pane}"
#   else
#     ${__restore}
#   fi
# }
#
# toggle_mouse() {
#   old=$(tmux show -g -w | grep mode-mouse | cut -d' ' -f2)
#   new=""
#
#   if [ "$old" = "on" ] ; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mode-mouse $new \;\
#        set -g mouse-resize-pane $new \;\
#        set -g mouse-select-pane $new \;\
#        set -g mouse-select-window $new \;\
#        display "mouse: $new"
# }
#
# $@
